5. rewrite threads for better multithreading-> eg yields, not busy wait
   a. initialize threads in config_api

9. actually get failover working
   Options
	a. have failover for each connection-> if failover for that connection, then
	   use it when exceed timelimit, otherwise, just do nothing
	       i. could also have backup aware of server-> if lose connection, then
	       	  call failover_server, and if no response in another time limit, 
		  then failover and tell all the dependent servers and the failing
		  server that they are being failed over-> turns server into backup
		  and keep sending backup to the failed server
	b. have backup flag-> if set, then know that no outgoing, just getting
	   backups and dont care if exceed time limit
	c. fail self over if no input for time limit

10. set up failover file to include all possible failovers and all dependent servers
    Note: the failover servers will be listed as dependencies

11. look into readers/ writers problem and come to a useful solution

12. make sure using index and id consistently and appropriately

13. remove any use of * proc_data and just a string to send

14. refactor config_api and initialize to reflect new structure of the API

15. determine how much the service object should be aware of failover-> do I just
    pass in the index or the id? If I failover, should the id or index change->
    Options
	A. service object is aware of changes-> send new ip, index, or id
	B. service object is unaware of changes-> hand it old ip, index, or id
	   -> this seems better, but how to implement and how do I differentiate from
	   old data
II general layout/ function definitions

new(int failover_timeout, int or string local_ip, local_port, fail_object):
	 create new object

config_api(string failover_filename): 	   prepare object for use

accept_thread(TCPServer server):	   receive new connections

input_thread(null):	   get input from existing connections and determine failover
			   condition

send_data(int index):	   send data from the application to a connection
	 
receive_data(int index):   get data from connection and and pass to server object
