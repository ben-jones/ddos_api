done 1. write a thread to accept files-> acceptance thread

2. realize that I am writing a single instance for a single server. This means one 
   local ip address and port number to accept connections from. Each new server
   instantiates and configures their own DDOS_API object. 
   	a. need to change class instance variables to object instance variables
	   this is every variable in the first set of variable
	b. create one thread for open receiving connections-> just use select and all
	   goes to same place-> io thread
	c. have reference to receiving object somewhere-> whether instantiated in API
	   or not
   to do	   i. be able to marshall object that i have a reference to

3. rewrite backup functions to use marshaling and call from io thread

4. rewrite send and receive to deal with multithreading
   a. only read fist few letters to cut down on processing time in receive

5. rewrite threads for better multithreading-> eg yields, not busy wait
   a. initialize threads in config_api

done 6. check == vs === and make sure I am using correctly in input_thread

done 7. flesh out how to use get_data-> thinking
   get_data(data, source_ip, source_port)

done 8. add incoming ip and port info to accept_thread

9. actually get failover working
   Options
	a. have failover for each connection-> if failover for that connection, then
	   use it when exceed timelimit, otherwise, just do nothing
	       i. could also have backup aware of server-> if lose connection, then
	       	  call failover_server, and if no response in another time limit, 
		  then failover and tell all the dependent servers and the failing
		  server that they are being failed over-> turns server into backup
		  and keep sending backup to the failed server
	b. have backup flag-> if set, then know that no outgoing, just getting
	   backups and dont care if exceed time limit
	c. fail self over if no input for time limit

10. set up failover file to include all possible failovers and all dependent servers
    Note: the failover servers will be listed as dependencies

11. look into readers/ writers problem and come to a useful solution

12. make sure using index and id consistently and appropriately

13. remove any use of * proc_data and just a string to send

II general layout/ function definitions

new(int failover_timeout, int or string local_ip, local_port, fail_object):
	 create new object

config_api(string failover_filename): 	   prepare object for use

accept_thread(TCPServer server):	   receive new connections

input_thread(null):	   get input from existing connections and determine failover
			   condition

send_data(int index):	   send data from the application to a connection
	 
receive_data(int index):   get data from connection and and pass to server object
